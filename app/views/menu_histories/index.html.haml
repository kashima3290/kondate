= render "shared/header"
.ui.text.container.center.aligned.grid{style: "margin-top: 30px"}
  %h2 日付指定検索
  .field.ui.calendar.required
    %lavel
    .ui.input.left.icon
      %i.calendar.icon
      %input{type: "text", name: "date", placeholder: "日付"}
- @menu_histories.each do |menu_history|
  %div{class: "ui", id: menu_history.id, style: "margin: 30px 10px"}
    .ui.stackable.column.container.grid{style: "padding-top: 30px;"}
      .column
        .ui.dividing.header.menu-history-edit{ data: { content: "編集する"} }
          %a{style: "cursor: pointer;", onclick: "editMenuHistory(event)", data: { historyid: menu_history.id} }
            = menu_history.eating_date.strftime("%Y年 %m月 %d日")
    .ui.menu-history
      .ui.four.stackable.cards{style: "margin: 10px 10px;"}
        - menu_history.menu.each do |menu|
          .orange.card
            = link_to menu_path(menu.id), {class: "ui image"} do
              = image_tag menu.menu_images[0].image.url, class: "ui medium image change-image", style: "height: 230px;"
            .content
              = link_to menu_path(menu.id), {class: "header"} do
                = menu.name
              .ui.red.ribbon.label
                = menu.genre
              .meta
              .description{style: "font-size: 12px;"}
                - if menu.text.present?
                  = link_to menu_path(menu.id), {class: "text"} do
                    = truncate(menu.text, length: 150)

-# ページネーション
.ui.column.centered.grid{style: "margin-top: 20px; padding-bottom: 40px;"}
  = paginate @menus

:javascript
  // カレンダーの表示
  $('.ui.calendar').calendar({
    type: 'date',
    formatter: {
      date: function (date) {
        var day = ('0' + date.getDate()).slice(-2);
        var month = ('0' + (date.getMonth() + 1)).slice(-2);
        var year = date.getFullYear();
        return year + '/' + month + '/' + day;
      }
    }
  });

  // メニュー履歴編集
  function editMenuHistory(event){
    // 他のメニュー履歴を編集している場合はセグメント・チェックボックス・削除ボタンの削除
    if(document.querySelector('.segment')) {
      // id: segment のみ削除
      let elm = document.querySelector('.segment')
      elm.classList.remove("placeholder");
      elm.classList.remove("segment");
    }

    // セグメント内にメニュー履歴をいれる
    let base_id = event.target.dataset.historyid;
    let target_history = document.getElementById(base_id);
    target_history.classList.add('placeholder');
    target_history.classList.add('segment');
    // 編集しているメニュー履歴のセグメント要素を作成
  }